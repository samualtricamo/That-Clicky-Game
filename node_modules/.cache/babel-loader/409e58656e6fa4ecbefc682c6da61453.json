{"ast":null,"code":"var _jsxFileName = \"/Users/samualtricamo/Desktop/New-Folder/reactpractice/src/components/clickygame.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport image from './image';\n\nclass clickyGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      navMsgColor: ' ',\n      navMessage: \"Click and image to begin!\",\n      allCharacters: this.shuffleArray(),\n      wasClicked: [],\n      shake: false\n    };\n    this.clickEvent = this.checkClicked.bind(this);\n  }\n\n  shuffleArray() {\n    const newArr = image.slice();\n    const shuffleArr = [];\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    const prevState = this.state.wasClicked.slice();\n    const shuffled = this.shuffleArray();\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      if (score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      }\n\n      prevState.push(clickedElem);\n    }\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'Correct!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n    return setTimeout(() => this.setState({\n      navMsgColor: ''\n    }), 500);\n  }\n\n  render() {\n    const state = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: state.score,\n      highScore: state.highScore,\n      navMessage: state.navMessage,\n      navMsgColor: state.navMsgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Banner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Container, {\n      shake: state.shake,\n      characters: state.allCharacters,\n      clickEvent: this.clickEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default clickyGame;","map":{"version":3,"sources":["/Users/samualtricamo/Desktop/New-Folder/reactpractice/src/components/clickygame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","image","clickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport image from './image';\n\nclass clickyGame extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n\n        navMsgColor: ' ',\n\n        navMessage: \"Click and image to begin!\",\n\n        allCharacters: this.shuffleArray(),\n\n    wasClicked: [],\n    shake: false\n    };\n\n    clickEvent = this.checkClicked.bind(this);\n\n    shuffleArray() {\n\n        const newArr = image.slice();\n\n        const shuffleArr = [];\n\n        while (newArr.length > 0) {\n            shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n          }\n      \n          return shuffleArr;\n    }\n\n    checkClicked(clickedElem) {\n\n        const prevState = this.state.wasClicked.slice();\n\n        const shuffled = this.shuffleArray();\n\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        if (!this.state.wasClicked.includes(clickedElem)) {\nif (score === highScore) {\n    score++;\n    highScore++;\n\n} else {\n    score++;\n}\n\nprevState.push(clickedElem);\n    }\n    if (this.state.wasClicked.includes(clickedElem)) {\n        let score = 0;\n        return this.setState({\n          score: score,\n          highScore: highScore,\n          navMsgColor: 'incorrect',\n          navMessage: 'Incorrect guess!',\n          allCharacters: shuffled,\n          wasClicked: [],\n          shake: true\n        });\n    }\n    this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'correct',\n        navMessage: 'Correct!',\n        allCharacters: shuffled,\n        wasClicked: prevState,\n        shake: false\n    });\n\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n}\n\nrender() {\n    const state = this.state;\n    return (\n        <div>\n            <Navbar\n            score={state.score}\n            highScore={state.highScore}\n            navMessage={state.navMessage}\n            navMsgColor={state.navMsgColor}\n        />\n            <Banner />\n                <Container\n                shake={state.shake}\n                characters={state.allCharacters}\n                clickEvent={this.clickEvent}\n        />\n        <Footer />        \n        </div>\n    );\n}\n}\n\nexport default clickyGame;"]},"metadata":{},"sourceType":"module"}